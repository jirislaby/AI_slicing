#!/usr/bin/perl
# Copyright (c) 2009 Jiri Slaby <jirislaby@gmail.com>
#
# Distributed under GPLv2
#
# This script accepts file list as parameters.
#
# It is intended to instrument the Linux Kernel so that we won't loose
# information about important functions.

use strict;
use warnings;
use File::Basename qw(dirname);

my @kinstrument = (
	"mutex_lock", "mutex_lock_nested", "mutex_unlock",
	"rcu_read_lock", "rcu_read_unlock",
	"spin_lock", "spin_lock_nested", "spin_unlock",
	"spin_lock_bh", "spin_unlock_bh",
	"spin_lock_irq", "spin_trylock_irq", "spin_lock_irq_nested",
		"spin_unlock_irq",
	"spin_lock_irqsave", "spin_trylock_irqsave", "spin_lock_irqsave_nested",
		"spin_unlock_irqrestore",
	"read_lock", "read_unlock", "read_lock_bh", "read_unlock_bh",
	"read_lock_irq", "read_unlock_irq",
	"read_lock_irqsave", "read_unlock_irqrestore",
	"write_lock", "write_unlock", "write_lock_bh", "write_unlock_bh",
	"write_lock_irq", "write_unlock_irq",
	"write_lock_irqsave", "write_unlock_irqrestore",
	"local_irq_save", "local_irq_restore",
	"local_irq_disable", "local_irq_enable",
	"preempt_disable", "preempt_enable",
	"wait_event_lock_irq",
	"memcpy", "memset",
	"put_cpu",

	"assert"
);
my @kinstrumentval = (
	"mutex_trylock", "mutex_lock_interruptible", "mutex_lock_killable",
	"mutex_lock_interruptible_nested", "mutex_lock_killable_nested",
	"spin_trylock",
	"lock_kernel", "unlock_kernel",
	"rcu_assign_pointer",

	"put_user", "get_user",
	"get_cpu"
#	"BUG", "BUG_ON",
#	"GFP_KERNEL",
);

sub create_re(@) {
	my $str =
# define + macro name + whitespace
		'#\s*define\s\b(' . join("|", @_) . ')\b\s*' .
# parameters
		'\(([^\)]*)\)\s*' .
# the definiton till the end of the line (multiline parsing with '\' at EOL)
		'(([^\n\\\\]*(\\\\.)?)*)' .
# the final EOL
		'\n';
	return qr/$str/;
}

my $re = create_re(@kinstrument);
my $reval = create_re(@kinstrumentval);

sub do_replace($$$$$) {
	my ($l, $r, $fun, $param, $def) = @_;
	my $sparam = (length $param > 0) ? ", $param" : "";
	return qq/#define $fun($param) $l __ai_start("$fun"$sparam); $def; $r\n/;
}

sub do_file($) {
	local $/;
	my $source = shift;
	open(SRC, "+<$source") || die "can't open '$source'";
	my $file = <SRC>;
	seek(SRC, 0, 0) || die "cannot seek '$source'";
	truncate(SRC, 0) || die "cannot truncate '$source'";
	$file =~ s/$re/do_replace('do {', '} while (0)', $1, $2, $3)/gse;
# typeof insted of long?
	$file =~ s/$reval/do_replace('({', '})', $1, $2, $3)/gse;
	print SRC "#ifndef __AI_FUNCTIONS\n";
	print SRC "#define __AI_FUNCTIONS\n";
	print SRC "extern const char *__ai_checker_str;\n";
	print SRC "extern void __ai_start(const char *str, ...) { __ai_checker_str = str; }\n";
	print SRC "#endif\n";
	print SRC $file;
	close(SRC);
}

foreach (@ARGV) {
	do_file $_;
}

exit 0;
