#!/usr/bin/perl
# Copyright (c) 2009 Jiri Slaby <jirislaby@gmail.com>
#
# Distributed under GPLv2
#
# This script accepts parameters in the following format:
# {source},{output},{working directory},{cpp flags}
#
# preprocessed file can be found at output.preproc
# types from typedefs might be found on standard output

use strict;
use warnings;
use File::Basename qw(dirname);

my @kinstrument = (
	"mutex_lock", "mutex_lock_nested", "mutex_unlock",
	"rcu_read_lock", "rcu_read_unlock",
	"spin_lock", "spin_lock_nested", "spin_unlock",
	"spin_lock_bh", "spin_unlock_bh",
	"spin_lock_irq", "spin_trylock_irq", "spin_lock_irq_nested",
		"spin_unlock_irq",
	"spin_lock_irqsave", "spin_trylock_irqsave", "spin_lock_irqsave_nested",
		"spin_unlock_irqrestore",
	"read_lock", "read_unlock", "read_lock_bh", "read_unlock_bh",
	"read_lock_irq", "read_unlock_irq",
	"read_lock_irqsave", "read_unlock_irqrestore",
	"write_lock", "write_unlock", "write_lock_bh", "write_unlock_bh",
	"write_lock_irq", "write_unlock_irq",
	"write_lock_irqsave", "write_unlock_irqrestore",
	"local_irq_save", "local_irq_restore",
	"local_irq_disable", "local_irq_enable",
	"preempt_disable", "preempt_enable",
	"wait_event_lock_irq",
	"get_cpu",
	"memcpy", "memset",

	"assert"
);
my @kinstrumentval = (
	"mutex_trylock", "mutex_lock_interruptible", "mutex_lock_killable",
	"mutex_lock_interruptible_nested", "mutex_lock_killable_nested",
	"spin_trylock",
	"lock_kernel", "unlock_kernel",
	"rcu_assign_pointer",

	"put_user", "get_user",
	"put_cpu"
#	"BUG", "BUG_ON",
#	"GFP_KERNEL",
);

sub create_re(@) {
	return '#\s*define\s\b(' . join("|", @_) .
		')\b\s*\(([^\)]*)\)(([^\n\\\\]*(\\\\.)?)*)\n';
}

my $re = create_re(@kinstrument);
my $reval = create_re(@kinstrumentval);

print STDERR "RE: $re\n";
print STDERR "REVAS: $reval\n";

sub do_file($) {
	local $/;
	my $source = shift;
	open(SRC, "+<$source") || die "can't open '$source'";
	my $file = <SRC>;
#	seek(SRC, 0, 0) || die "cannot seek '$source'";
#	truncate(SRC, 0) || die "cannot truncate '$source'";
	$file =~ s/$re/#define $1($2) do { start("$1" # $2); $3; stop("$1" # $2); } while (0)\n/gs;
	$file =~ s/$reval/#define $1($2) ({ int __rval; start("$1" # $2); rval = $3; stop("$1" # $2); __rval; })\n/gs;
	print "const char *__checker_str;\n";
	print "static void start(const char *str) { __checker_str = str; }\n";
	print "static void stop(const char *str) { __checker_str = str; }\n";
	print $file;
	close(SRC);
}

foreach (@ARGV) {
	do_file $_;
}

exit 0;
